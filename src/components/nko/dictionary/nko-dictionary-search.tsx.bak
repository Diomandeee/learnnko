"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Badge } from "@/components/ui/badge"
import { 
  Search, 
  Volume2, 
  Star, 
  StarOff, 
  BookmarkPlus, 
  Copy, 
  History,
  Book,
  ArrowRight,
  AlignLeft,
  Languages,
  Loader2
} from "lucide-react"
import { useToast } from "@/components/ui/use-toast"

interface DictionaryEntry {
  id: string
  nko: string
  latin: string
  english: string
  french: string
  partOfSpeech: string
  isFavorite: boolean
  example?: {
    nko: string
    english: string
    french: string
  }
}

export function NkoDictionarySearch() {
  const [searchQuery, setSearchQuery] = useState("")
  const [searchLang, setSearchLang] = useState<"english" | "french" | "nko">("english")
  const [searchResults, setSearchResults] = useState<DictionaryEntry[]>([])
  const [isLoading, setIsLoading] = useState(false)
  const [recentSearches, setRecentSearches] = useState<string[]>([])
  const [favoriteWords, setFavoriteWords] = useState<DictionaryEntry[]>([])
  const [activeTab, setActiveTab] = useState<string>("results")
  const { toast } = useToast()
  
  // Load saved favorites on component mount
  useEffect(() => {
    const loadFavorites = async () => {
      try {
        const response = await fetch('/api/nko/dictionary/favorites')
        if (response.ok) {
          const data = await response.json()
          setFavoriteWords(data.favorites || [])
        }
      } catch (error) {
        console.error("Failed to load favorites:", error)
      }
    }
    
    loadFavorites()
    
    // Load recent searches from localStorage
    const storedSearches = localStorage.getItem('nko-recent-searches')
    if (storedSearches) {
      setRecentSearches(JSON.parse(storedSearches))
    }
  }, [])
  
  // Save recent searches to localStorage when updated
  useEffect(() => {
    localStorage.setItem('nko-recent-searches', JSON.stringify(recentSearches))
  }, [recentSearches])

  const handleSearch = async () => {
    if (!searchQuery.trim()) {
      toast({
        title: "No search query",
        description: "Please enter a word to search for",
        variant: "destructive"
      })
      return
    }
    
    setIsLoading(true)
    try {
      const response = await fetch(`/api/nko/dictionary/search?q=${encodeURIComponent(searchQuery)}&lang=${searchLang}`)
      
      if (!response.ok) throw new Error('Search failed')
      
      const data = await response.json()
      setSearchResults(data.results)
      setActiveTab("results")
      
      // Add to recent searches if not already there
      if (!recentSearches.includes(searchQuery)) {
        setRecentSearches(prev => [searchQuery, ...prev].slice(0, 10))
      }
    } catch (error) {
      toast({
        title: "Search failed",
        description: "Failed to search the dictionary. Please try again.",
        variant: "destructive"
      })
    } finally {
      setIsLoading(false)
    }
  }
  
  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text)
    toast({
      title: "Copied to clipboard",
      description: "Text has been copied to your clipboard"
    })
  }
  
  const playAudio = async (text: string, language: string = 'nko') => {
    try {
      const response = await fetch('/api/nko/tts', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          text,
          language
        })
      })
      
      if (!response.ok) throw new Error('Text-to-speech failed')
      
      const audioBlob = await response.blob()
      const audioUrl = URL.createObjectURL(audioBlob)
      const audio = new Audio(audioUrl)
      await audio.play()
    } catch (error) {
      toast({
        title: "Audio error",
        description: "Failed to play audio. Please try again.",
        variant: "destructive"
      })
    }
  }
  
  const toggleFavorite = async (entry: DictionaryEntry) => {
    try {
      if (!entry.isFavorite) {
        // Add to favorites
        const response = await fetch('/api/nko/dictionary/favorites', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ entryId: entry.id })
        })
        
        if (!response.ok) throw new Error('Failed to add favorite')
        
        // Update UI
        setSearchResults(prev => 
          prev.map(item => item.id === entry.id ? { ...item, isFavorite: true } : item)
        )
        setFavoriteWords(prev => [...prev, { ...entry, isFavorite: true }])
        
        toast({
          title: "Added to favorites",
          description: `"${entry.nko}" has been added to your saved words`
        })
      } else {
        // Remove from favorites
        const response = await fetch(`/api/nko/dictionary/favorites/${entry.id}`, {
          method: 'DELETE'
        })
        
        if (!response.ok) throw new Error('Failed to remove favorite')
        
        // Update UI
        setSearchResults(prev => 
          prev.map(item => item.id === entry.id ? { ...item, isFavorite: false } : item)
        )
        setFavoriteWords(prev => prev.filter(item => item.id !== entry.id))
        
        toast({
          title: "Removed from favorites",
          description: `"${entry.nko}" has been removed from your saved words`
        })
      }
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to update favorites. Please try again.",
        variant: "destructive"
      })
    }
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>N'Ko Dictionary</CardTitle>
          <CardDescription>
            Search for words in English, French, or N'Ko
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col md:flex-row gap-4">
            <div className="flex-1">
              <Input
                placeholder={searchLang === "nko" ? "ߞߊ߬ ߞߎ߬ߡߊ߬ߘߊ߬ ߛߓߍ ߣߌ߲߬..." : "Search..."}
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className={searchLang === "nko" ? "text-right font-nko text-lg" : ""}
                dir={searchLang === "nko" ? "rtl" : "ltr"}
                onKeyDown={(e) => e.key === 'Enter' && handleSearch()}
              />
            </div>
            <div className="flex gap-2">
              <Tabs value={searchLang} onValueChange={(v) => setSearchLang(v as any)} className="w-[300px]">
                <TabsList className="grid grid-cols-3">
                  <TabsTrigger value="english">English</TabsTrigger>
                  <TabsTrigger value="french">French</TabsTrigger>
                  <TabsTrigger value="nko">N'Ko</TabsTrigger>
                </TabsList>
              </Tabs>
              <Button onClick={handleSearch} disabled={isLoading}>
                {isLoading ? (
                  <Loader2 className="h-4 w-4 animate-spin" />
                ) : (
                  <Search className="h-4 w-4" />
                )}
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
      
      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="grid grid-cols-3">
          <TabsTrigger value="results">
            <Book className="h-4 w-4 mr-2" />
            Search Results
          </TabsTrigger>
          <TabsTrigger value="favorites">
            <Star className="h-4 w-4 mr-2" />
            Favorites
          </TabsTrigger>
          <TabsTrigger value="recent">
            <History className="h-4 w-4 mr-2" />
            Recent Searches
          </TabsTrigger>
        </TabsList>
        
        <TabsContent value="results" className="pt-4">
          {searchQuery ? (
            searchResults.length > 0 ? (
              <div className="space-y-4">
                {searchResults.map((entry, index) => (
                  <Card key={index}>
                    <CardHeader className="pb-2">
                      <div className="flex justify-between items-start">
                        <div>
                          <CardTitle>
                            {entry.english} 
                            <span className="ml-2 text-sm text-muted-foreground">
                              {entry.partOfSpeech}
                            </span>
                          </CardTitle>
                          <CardDescription>
                            {entry.french}
                          </CardDescription>
                        </div>
                        <div className="flex items-center gap-2">
                          <Button 
                            variant="ghost" 
                            size="sm" 
                            onClick={() => playAudio(entry.nko)}
                          >
                            <Volume2 className="h-4 w-4" />
                          </Button>
                          <Button 
                            variant="ghost" 
                            size="sm" 
                            onClick={() => toggleFavorite(entry)}
                          >
                            {entry.isFavorite ? (
                              <Star className="h-4 w-4 fill-yellow-400 text-yellow-400" />
                            ) : (
                              <BookmarkPlus className="h-4 w-4" />
                            )}
                          </Button>
                          <Button 
                            variant="ghost" 
                            size="sm" 
                            onClick={() => copyToClipboard(entry.nko)}
                          >
                            <Copy className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                    </CardHeader>
                    <CardContent className="space-y-4">
                      <div className="flex items-center justify-between">
                        <span className="font-nko text-2xl" dir="rtl">{entry.nko}</span>
                        <span className="text-sm text-muted-foreground">
                          Transliteration: {entry.latin}
                        </span>
                      </div>
                      
                      {entry.example && (
                        <div className="mt-4 p-3 bg-muted rounded-md space-y-2">
                          <h4 className="text-sm font-medium">Example:</h4>
                          <p className="font-nko text-lg" dir="rtl">{entry.example.nko}</p>
                          <div className="flex flex-col md:flex-row md:items-center gap-2 text-sm text-muted-foreground">
                            <div className="flex items-center">
                              <Languages className="h-4 w-4 mr-1" />
                              <p>{entry.example.english}</p>
                            </div>
                            <ArrowRight className="hidden md:block h-3 w-3 mx-1" />
                            <p>{entry.example.french}</p>
                          </div>
                          <div className="flex justify-end">
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => playAudio(entry.example.nko)}
                            >
                              <Volume2 className="h-4 w-4 mr-1" />
                              Listen to example
                            </Button>
                          </div>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                ))}
              </div>
            ) : (
              <div className="text-center p-8 border rounded-md bg-muted">
                <Search className="h-8 w-8 text-muted-foreground mx-auto mb-2" />
                <h3 className="text-lg font-medium">No results found</h3>
                <p className="text-muted-foreground">
                  Try a different search term or language
                </p>
              </div>
            )
          ) : (
            <div className="text-center p-8 border rounded-md bg-muted">
              <AlignLeft className="h-8 w-8 text-muted-foreground mx-auto mb-2" />
              <h3 className="text-lg font-medium">Search the N'Ko dictionary</h3>
              <p className="text-muted-foreground">
                Enter a word above to get started
              </p>
            </div>
          )}
        </TabsContent>
        
        <TabsContent value="favorites" className="pt-4">
          {favoriteWords.length > 0 ? (
            <div className="space-y-4">
              {favoriteWords.map((entry, index) => (
                <Card key={index}>
                  <CardHeader className="pb-2">
                    <div className="flex justify-between items-start">
                      <CardTitle>
                        {entry.english}
                        <span className="ml-2 text-sm text-muted-foreground">
                          {entry.partOfSpeech}
                        </span>
                      </CardTitle>
                      <div className="flex items-center gap-2">
                        <Button 
                          variant="ghost" 
                          size="sm" 
                          onClick={() => playAudio(entry.nko)}
                        >
                          <Volume2 className="h-4 w-4" />
                        </Button>
                        <Button 
                          variant="ghost" 
                          size="sm" 
                          onClick={() => toggleFavorite(entry)}
                        >
                          <Star className="h-4 w-4 fill-yellow-400 text-yellow-400" />
                        </Button>
                        <Button 
                          variant="ghost" 
                          size="sm" 
                          onClick={() => copyToClipboard(entry.nko)}
                        >
                          <Copy className="h-4 w-4" />
                        </Button>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="flex items-center justify-between">
                      <span className="font-nko text-2xl" dir="rtl">{entry.nko}</span>
                      <span className="text-sm text-muted-foreground">
                        Transliteration: {entry.latin}
                      </span>
                    </div>
                    
                    {entry.example && (
                      <div className="mt-4 p-3 bg-muted rounded-md">
                        <p className="font-nko text-lg" dir="rtl">{entry.example.nko}</p>
                        <p className="text-sm text-muted-foreground mt-1">{entry.example.english}</p>
                      </div>
                    )}
                  </CardContent>
                </Card>
              ))}
            </div>
          ) : (
            <div className="text-center p-8 border rounded-md bg-muted">
              <Star className="h-8 w-8 text-muted-foreground mx-auto mb-2" />
              <h3 className="text-lg font-medium">No favorite words yet</h3>
              <p className="text-muted-foreground">
                Add words to your favorites by clicking the bookmark icon
              </p>
            </div>
          )}
        </TabsContent>
        
        <TabsContent value="recent" className="pt-4">
          {recentSearches.length > 0 ? (
            <Card>
              <CardHeader>
                <CardTitle>Recent Searches</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-2">
                  {recentSearches.map((search, index) => (
                    <Button 
                      key={index} 
                      variant="outline" 
                      className="justify-start"
                      onClick={() => {
                        setSearchQuery(search)
                        handleSearch()
                        }}
                    >
                      <History className="h-4 w-4 mr-2" />
                      {search}
                    </Button>
                  ))}
                </div>
              </CardContent>
            </Card>
          ) : (
            <div className="text-center p-8 border rounded-md bg-muted">
              <History className="h-8 w-8 text-muted-foreground mx-auto mb-2" />
              <h3 className="text-lg font-medium">No recent searches</h3>
              <p className="text-muted-foreground">
                Your search history will appear here
              </p>
            </div>
          )}
        </TabsContent>
      </Tabs>
    </div>
  )
}
