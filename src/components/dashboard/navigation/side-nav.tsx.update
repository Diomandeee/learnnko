"use client"

import Link from "next/link"
import { usePathname } from "next/navigation"
import { cn } from "@/lib/utils"
import {
  BookOpen,
  GraduationCap,
  HomeIcon,
  QrCode,
  Settings,
  BarChart3,
  Languages,
  BookMarked
} from "lucide-react"

const navigation = [
  { name: "Dashboard", href: "/dashboard", icon: HomeIcon },
  { name: "QR Codes", href: "/dashboard/qr", icon: QrCode },
  { name: "Analytics", href: "/dashboard/analytics", icon: BarChart3 },
  {
    name: "N'Ko Learning",
    href: "/dashboard/nko",
    icon: Languages,
    children: [
      { name: "Overview", href: "/dashboard/nko", icon: HomeIcon },
      { name: "Dictionary", href: "/dashboard/nko/dictionary", icon: BookMarked },
      { name: "Translator", href: "/dashboard/nko/translator", icon: GraduationCap },
      { name: "Lessons", href: "/dashboard/nko/lessons", icon: BookOpen },
      { name: "Practice", href: "/dashboard/nko/practice", icon: BookOpen },
    ],
  },
  { name: "Settings", href: "/dashboard/settings", icon: Settings },
]

interface SideNavProps {
  className?: string
}

export function SideNav({ className }: SideNavProps) {
  const pathname = usePathname()

  return (
    <div className={cn("flex h-full flex-col border-r bg-card", className)}>
      <div className="flex-1 overflow-y-auto py-4">
        <nav className="space-y-1 px-2">
          {navigation.map((item) => {
            const isActive = item.href === pathname || 
              (item.children && item.children.some(child => child.href === pathname)) ||
              (pathname.startsWith(item.href) && item.href !== "/dashboard")
            
            const isExpanded = item.children && 
              (isActive || item.children.some(child => child.href === pathname))

            return (
              <div key={item.name}>
                <Link
                  href={item.href}
                  className={cn(
                    "group flex items-center rounded-md px-2 py-2 text-sm font-medium",
                    isActive
                      ? "bg-primary text-primary-foreground"
                      : "text-muted-foreground hover:bg-accent hover:text-accent-foreground"
                  )}
                >
                  <item.icon
                    className={cn(
                      "mr-3 h-5 w-5 flex-shrink-0",
                      isActive ? "text-primary-foreground" : "text-muted-foreground group-hover:text-accent-foreground"
                    )}
                    aria-hidden="true"
                  />
                  <span className="truncate">{item.name}</span>
                </Link>
                
                {item.children && isExpanded && (
                  <div className="ml-8 mt-1 space-y-1">
                    {item.children.map((child) => (
                      <Link
                        key={child.name}
                        href={child.href}
                        className={cn(
                          "group flex items-center rounded-md px-2 py-2 text-sm font-medium",
                          pathname === child.href
                            ? "bg-primary text-primary-foreground"
                            : "text-muted-foreground hover:bg-accent hover:text-accent-foreground"
                        )}
                      >
                        <child.icon
                          className={cn(
                            "mr-3 h-4 w-4 flex-shrink-0",
                            pathname === child.href ? "text-primary-foreground" : "text-muted-foreground group-hover:text-accent-foreground"
                          )}
                          aria-hidden="true"
                        />
                        <span className="truncate">{child.name}</span>
                      </Link>
                    ))}
                  </div>
                )}
              </div>
            )
          })}
        </nav>
      </div>
    </div>
  )
}
